--[[
    VLK Hub Pro++ (All Features Edition)
    ✦ By Velkzie ✦
]]
-- Full implementation based on design, including: animated gradients, theme selector,
-- auto-refreshing scripts list, manual reload, favorites, search, quick tools, MOTD.

local HUB_VERSION = "2.0.0"
local VERSION_URL = "https://raw.githubusercontent.com/prototype-Z/VLK-Hub-Script/main/version.txt"
local SCRIPTS_URL = "https://raw.githubusercontent.com/prototype-Z/VLK-Hub-Script/main/scripts.json"
local MOTD_URL = "https://raw.githubusercontent.com/prototype-Z/VLK-Hub-Script/main/motd.txt"

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")

local FAVORITES_FOLDER = "VLK_Hub"
local FAVORITES_FILE = FAVORITES_FOLDER .. "/Favorites.json"
local CONFIG_FILE = FAVORITES_FOLDER .. "/Config.json"

local HAVE_FS = (typeof(isfile) == "function") and (typeof(readfile) == "function") 
    and (typeof(writefile) == "function") and (typeof(makefolder) == "function")

if HAVE_FS and not isfolder(FAVORITES_FOLDER) then
    makefolder(FAVORITES_FOLDER)
end

local okRay, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not okRay or not Rayfield then
    warn("[VLK Hub] Failed to load Rayfield!")
    return
end

local Window = Rayfield:CreateWindow({
    Name = "VLK Hub Pro++",
    Icon = "Home",
    LoadingTitle = "VLK Scripts",
    LoadingSubtitle = "by Velkzie",
    Theme = "Amethyst",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "VLK_Hub",
        FileName = "VLK_Config"
    },
})

local function notify(title, text, duration)
    Rayfield:Notify({ Title = title, Content = text, Duration = duration or 3 })
end

-- Theme system
local Themes = {
    ["Purple/Black"] = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 0, 150)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
    },
    ["Blue/Cyan"] = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 85, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 255, 255))
    },
    ["Sunset"] = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 85, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 127))
    }
}

local SelectedTheme = "Purple/Black"

local function saveConfig()
    if HAVE_FS then
        writefile(CONFIG_FILE, HttpService:JSONEncode({ Theme = SelectedTheme }))
    end
end

local function loadConfig()
    if HAVE_FS and isfile(CONFIG_FILE) then
        local ok, data = pcall(function() return readfile(CONFIG_FILE) end)
        if ok and data then
            local decoded = HttpService:JSONDecode(data)
            if decoded.Theme then SelectedTheme = decoded.Theme end
        end
    end
end
loadConfig()

local function applyGradient(uiObject, colorSeq)
    local gradient = Instance.new("UIGradient")
    gradient.Color = colorSeq
    gradient.Rotation = 0
    gradient.Parent = uiObject
    task.spawn(function()
        while gradient.Parent do
            for i = 0, 360, 1 do
                gradient.Rotation = i
                task.wait(0.03)
            end
        end
    end)
end

task.spawn(function()
    task.wait(1)
    local coreGui = game:GetService("CoreGui")
    local rfGui = coreGui:FindFirstChild("Rayfield", true)
    if rfGui then
        for _, frame in pairs(rfGui:GetDescendants()) do
            if frame:IsA("Frame") and frame.BackgroundTransparency < 1 then
                applyGradient(frame, Themes[SelectedTheme])
            end
        end
    end
end)

-- Safe script loader
local function safeLoad(name, url)
    notify("Loading " .. name, "Please wait...", 2)
    task.spawn(function()
        local ok, data = pcall(function()
            return game:HttpGet(url)
        end)
        if not ok or not data or data == "" then
            notify("Error", "Failed to load " .. name, 4)
            return
        end
        local runOk, err = pcall(function()
            loadstring(data)()
        end)
        if runOk then
            notify("✅ Loaded " .. name, "Enjoy!", 2)
        else
            notify("❌ Script Error", err, 5)
        end
    end)
end

-- Load scripts.json
local scriptsData = {}
local function loadScriptsJson()
    local ok, data = pcall(function()
        return game:HttpGet(SCRIPTS_URL)
    end)
    if not ok or not data or data == "" then
        notify("Error", "Failed to load scripts.json", 5)
        return
    end
    local okDecode, decoded = pcall(function()
        return HttpService:JSONDecode(data)
    end)
    if okDecode and type(decoded) == "table" then
        scriptsData = decoded
    end
end
loadScriptsJson()

-- Auto-refresh
task.spawn(function()
    while true do
        task.wait(300)
        loadScriptsJson()
    end
end)

-- Favorites
local favorites = {}
local function loadFavorites()
    if HAVE_FS and isfile(FAVORITES_FILE) then
        local ok, data = pcall(function() return readfile(FAVORITES_FILE) end)
        if ok and data then
            local decoded = HttpService:JSONDecode(data)
            favorites = decoded or {}
        end
    end
end
local function saveFavorites()
    if HAVE_FS then
        writefile(FAVORITES_FILE, HttpService:JSONEncode(favorites))
    end
end
loadFavorites()

local function addFavorite(name, url)
    table.insert(favorites, { name = name, url = url })
    saveFavorites()
end

-- Build Tabs
if scriptsData then
    for category, scripts in pairs(scriptsData) do
        local tab = Window:CreateTab("📂 " .. category)
        for name, url in pairs(scripts) do
            tab:CreateButton({
                Name = name,
                Callback = function() safeLoad(name, url) end
            })
            tab:CreateButton({
                Name = "⭐ Favorite: " .. name,
                Callback = function() addFavorite(name, url) end
            })
        end
    end
end

-- Favorites Tab
local FavoritesTab = Window:CreateTab("⭐ Favorites")
for _, fav in ipairs(favorites) do
    FavoritesTab:CreateButton({
        Name = fav.name,
        Callback = function() safeLoad(fav.name, fav.url) end
    })
end

-- Search Tab
local SearchTab = Window:CreateTab("🔍 Search")
SearchTab:CreateInput({
    Name = "Search Script",
    PlaceholderText = "Type script name...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        local found = false
        for category, scripts in pairs(scriptsData) do
            for name, url in pairs(scripts) do
                if string.find(string.lower(name), string.lower(text)) then
                    safeLoad(name, url)
                    found = true
                    break
                end
            end
            if found then break end
        end
        if not found then
            notify("No Script Found", "Try another search term", 3)
        end
    end
})

-- Quick Tools Tab
local ToolsTab = Window:CreateTab("🛠 Quick Tools")
ToolsTab:CreateButton({ Name = "Anti-AFK", Callback = function()
    local vu = game:GetService("VirtualUser")
    Players.LocalPlayer.Idled:Connect(function()
        vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        task.wait(1)
        vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
    notify("Anti-AFK Enabled", "You will no longer be kicked for idling.")
end})
ToolsTab:CreateButton({ Name = "Rejoin Server", Callback = function()
    TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Players.LocalPlayer)
end})
ToolsTab:CreateButton({ Name = "Server Hop", Callback = function()
    TeleportService:Teleport(game.PlaceId)
end})
ToolsTab:CreateButton({ Name = "Copy JobID", Callback = function()
    setclipboard(game.JobId)
    notify("Copied", "JobID copied to clipboard.")
end})

-- Credits Tab + MOTD
local CreditsTab = Window:CreateTab("📜 Credits")
CreditsTab:CreateLabel("Developed by: Velkzie 🖤")
CreditsTab:CreateLabel("Version: " .. HUB_VERSION)
CreditsTab:CreateParagraph({
    Title = "About",
    Content = "VLK Hub is a safe and fun Roblox script hub developed by Velkzie. No malicious code — just clean fun."
})
CreditsTab:CreateButton({ Name = "Check for Updates", Callback = function()
    local ok, latest = pcall(function()
        return game:HttpGet(VERSION_URL)
    end)
    if ok and latest and latest ~= HUB_VERSION then
        notify("Update Available!", "Your version: " .. HUB_VERSION .. " | Latest: " .. latest, 5)
    else
        notify("Up to Date", "You're running the latest version!", 3)
    end
end})

-- MOTD from GitHub
local ok, motd = pcall(function()
    return game:HttpGet(MOTD_URL)
end)
if ok and motd and motd ~= "" then
    CreditsTab:CreateParagraph({
        Title = "Announcements",
        Content = motd
    })
end

notify("VLK Hub Pro++ Loaded!", "Welcome back, Velkzie 💙", 4)
