--[[
    VLK Hub (Pro Edition)
    ‚ú¶ By Velkzie ‚ú¶
    Dynamic, Safe, and Easy to Update
    + Animated Gradient UI
]]

local HUB_VERSION = "1.1.0"
local VERSION_URL = "https://raw.githubusercontent.com/Velkzie/VLKHub/main/version.txt"
local SCRIPTS_URL = "https://raw.githubusercontent.com/prototype-Z/VLK-Hub-Script/main/scripts.json"

local HttpService = game:GetService("HttpService")

-- File paths for persistent data
local FAVORITES_FOLDER = "VLK_Hub"
local FAVORITES_FILE = FAVORITES_FOLDER .. "/Favorites.json"

-- Guard for file APIs
local HAVE_FS = (typeof(isfile) == "function") and (typeof(readfile) == "function") and (typeof(writefile) == "function")

-- Load Rayfield
local okRay, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not okRay or not Rayfield then
    warn("[VLK Hub] Failed to load Rayfield!")
    return
end

-- Window
local Window = Rayfield:CreateWindow({
    Name = "VLK Hub",
    Icon = "Home",
    LoadingTitle = "VLK Scripts",
    LoadingSubtitle = "by Velkzie",
    Theme = "Amethyst",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "VLK_Hub",
        FileName = "VLK_Config"
    },
})

----------------------------------------------------------------
-- Animated purple‚Üíblack gradient background for Rayfield
----------------------------------------------------------------
local function applyAnimatedGradientTo(instance)
    if not instance or not instance:IsA("GuiObject") then return end
    -- Avoid stacking multiple gradients
    if instance:FindFirstChildOfClass("UIGradient") then return end

    local grad = Instance.new("UIGradient")
    grad.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(120, 0, 180)), -- bright purple
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(45, 0, 75)),   -- deep purple
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))      -- black
    })
    grad.Rotation = 0
    grad.Transparency = NumberSequence.new(0) -- fully visible
    grad.Parent = instance

    task.spawn(function()
        while grad.Parent do
            -- slow rotation loop (smooth, low CPU)
            for i = 0, 360, 1 do
                grad.Rotation = i
                task.wait(0.03)
                if not grad.Parent then break end
            end
        end
    end)
end

-- Find Rayfield's main containers and apply the gradient
task.spawn(function()
    -- small delay to ensure Rayfield builds its UI
    task.wait(1)

    local coreGui = game:GetService("CoreGui")
    local rfRoot = nil
    -- Try common Rayfield root names, fall back to any ScreenGui containing "Rayfield"
    for _, gui in ipairs(coreGui:GetChildren()) do
        if gui:IsA("ScreenGui") and (gui.Name:lower():find("rayfield")) then
            rfRoot = gui
            break
        end
    end
    -- if not found by name, search descendants for a Frame named "Main"
    if not rfRoot then
        for _, d in ipairs(coreGui:GetDescendants()) do
            if d:IsA("Frame") and d.Name:lower():find("main") and d:FindFirstAncestorOfClass("ScreenGui") then
                rfRoot = d:FindFirstAncestorOfClass("ScreenGui")
                break
            end
        end
    end

    if rfRoot then
        -- Try to get big primary frames to look nice:
        -- Main container, sidebar, pages, etc.
        local candidates = {}
        for _, d in ipairs(rfRoot:GetDescendants()) do
            if d:IsA("Frame") or d:IsA("ScrollingFrame") then
                -- Prefer larger frames (backgrounds) by size heuristic
                local abs = d.AbsoluteSize
                if abs.X >= 200 and abs.Y >= 150 then
                    table.insert(candidates, d)
                end
            end
        end
        -- Apply to top 1‚Äì3 biggest frames for a classy layered look
        table.sort(candidates, function(a,b)
            local sa = a.AbsoluteSize.X * a.AbsoluteSize.Y
            local sb = b.AbsoluteSize.X * b.AbsoluteSize.Y
            return sa > sb
        end)
        for i, frame in ipairs(candidates) do
            if i > 3 then break end
            applyAnimatedGradientTo(frame)
        end
    end
end)

-- Notify helper
local function notify(title, text, duration)
    Rayfield:Notify({ Title = title, Content = text, Duration = duration or 3 })
end

-- Safe script loader
local function safeLoad(name, url)
    notify("Loading " .. name, "Please wait...", 2)
    task.spawn(function()
        local ok, data = pcall(function()
            return game:HttpGet(url)
        end)
        if not ok or not data or data == "" then
            notify("Error", "Failed to load " .. name .. " ‚Äî invalid or missing link!", 4)
            return
        end
        local runOk, err = pcall(function()
            loadstring(data)()
        end)
        if runOk then
            notify("‚úÖ Loaded " .. name, "Enjoy!", 2)
        else
            notify("‚ùå Script Error", err, 5)
        end
    end)
end

-- Update checker
local function checkForUpdates()
    task.spawn(function()
        local ok, latest = pcall(function()
            return game:HttpGet(VERSION_URL)
        end)
        if ok and latest and latest ~= HUB_VERSION then
            notify("Update Available!", "Your version: " .. HUB_VERSION .. " | Latest: " .. latest, 5)
        else
            notify("Up to Date", "You're running the latest version!", 3)
        end
    end)
end

-- Load scripts.json
local scriptsData = {}
local function loadScriptsJson()
    local ok, data = pcall(function()
        return game:HttpGet(SCRIPTS_URL)
    end)
    if not ok or not data or data == "" then
        notify("Error", "Failed to load script list from server!", 5)
        return
    end
    local okDecode, decoded = pcall(function()
        return HttpService:JSONDecode(data)
    end)
    if okDecode and type(decoded) == "table" then
        scriptsData = decoded
    else
        notify("Error", "scripts.json is not valid JSON.", 5)
    end
end
loadScriptsJson()

-- Reload scripts button helper
local function reloadScripts()
    loadScriptsJson()
    notify("Scripts Reloaded", "Latest scripts.json loaded from GitHub!", 3)
end

----------------------------------------------------------------
-- Favorites
----------------------------------------------------------------
local favorites = {}

local function ensureFavoritesFile()
    if not HAVE_FS then return false end
    if not isfile(FAVORITES_FILE) then
        writefile(FAVORITES_FILE, HttpService:JSONEncode({}))
    end
    return true
end

local function loadFavorites()
    if not HAVE_FS then
        notify("Heads up", "Your executor doesn't support saving favorites.", 5)
        return
    end
    if not ensureFavoritesFile() then return end
    local ok, data = pcall(function()
        return readfile(FAVORITES_FILE)
    end)
    if ok and data and #data > 0 then
        local okDecode, list = pcall(function()
            return HttpService:JSONDecode(data)
        end)
        if okDecode and type(list) == "table" then
            favorites = list
        else
            favorites = {}
            writefile(FAVORITES_FILE, HttpService:JSONEncode(favorites))
        end
    else
        favorites = {}
        writefile(FAVORITES_FILE, HttpService:JSONEncode(favorites))
    end
end

local function saveFavorites()
    if not HAVE_FS then return end
    writefile(FAVORITES_FILE, HttpService:JSONEncode(favorites))
end

local function favoriteIndexByName(name)
    for i, fav in ipairs(favorites) do
        if fav.name == name then return i end
    end
    return nil
end

local function addFavorite(name, url)
    if favoriteIndexByName(name) then
        notify("Already a Favorite", name .. " is already in your favorites.", 3)
        return
    end
    table.insert(favorites, { name = name, url = url })
    saveFavorites()
    notify("Added to Favorites", name .. " has been added!", 3)
end

local function removeFavorite(name)
    local idx = favoriteIndexByName(name)
    if not idx then
        notify("Not Found", name .. " is not in favorites.", 3)
        return
    end
    table.remove(favorites, idx)
    saveFavorites()
    notify("Removed", name .. " has been removed from favorites.", 3)
end

if HAVE_FS then
    loadFavorites()
end

----------------------------------------------------------------
-- Dynamic Tabs from scripts.json
----------------------------------------------------------------
if scriptsData then
    for category, scripts in pairs(scriptsData) do
        local tab = Window:CreateTab("üìÇ " .. tostring(category))
        for name, url in pairs(scripts) do
            tab:CreateButton({
                Name = tostring(name),
                Callback = function()
                    safeLoad(name, url)
                end
            })
            tab:CreateButton({
                Name = "‚≠ê Add to Favorites: " .. tostring(name),
                Callback = function()
                    addFavorite(name, url)
                    if typeof(_G.__refreshFavoritesTab) == "function" then
                        task.delay(0.05, _G.__refreshFavoritesTab)
                    end
                end
            })
        end
    end
end

----------------------------------------------------------------
-- Favorites Tab
----------------------------------------------------------------
local FavoritesTab = Window:CreateTab("‚≠ê Favorites")

local function drawFavorites()
    FavoritesTab:ClearElements()
    if not HAVE_FS then
        FavoritesTab:CreateParagraph({
            Title = "Favorites Disabled",
            Content = "Executor doesn't support file APIs (readfile/writefile)."
        })
    end
    if #favorites == 0 then
        FavoritesTab:CreateLabel("No favorites yet.")
        return
    end
    for _, fav in ipairs(favorites) do
        FavoritesTab:CreateButton({
            Name = "‚ñ∂ " .. fav.name,
            Callback = function() safeLoad(fav.name, fav.url) end
        })
        FavoritesTab:CreateButton({
            Name = "üóëÔ∏è Remove: " .. fav.name,
            Callback = function() removeFavorite(fav.name) drawFavorites() end
        })
    end
    FavoritesTab:CreateButton({
        Name = "üîÑ Reload Favorites (from file)",
        Callback = function()
            loadFavorites()
            drawFavorites()
            notify("Reloaded", "Favorites reloaded from file.", 3)
        end
    })
end
_G.__refreshFavoritesTab = drawFavorites
drawFavorites()

----------------------------------------------------------------
-- Search Tab (your scripts.json)
----------------------------------------------------------------
local SearchTab = Window:CreateTab("üîç Search")
SearchTab:CreateInput({
    Name = "Search Script",
    PlaceholderText = "Type script name...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        local query = string.lower(text or "")
        if query == "" then notify("Tip", "Type a script name to search.", 2) return end
        for category, scripts in pairs(scriptsData) do
            for name, url in pairs(scripts) do
                if string.find(string.lower(name), query, 1, true) then
                    safeLoad(name, url)
                    return
                end
            end
        end
        notify("No Script Found", "Try another search term", 3)
    end
})

----------------------------------------------------------------
-- Credits / Update
----------------------------------------------------------------
local CreditsTab = Window:CreateTab("üìú Credits")
CreditsTab:CreateLabel("Developed by: Velkzie üñ§")
CreditsTab:CreateLabel("Version: " .. HUB_VERSION)
CreditsTab:CreateParagraph({
    Title = "About",
    Content = "VLK Hub is a safe and fun Roblox script hub developed by Velkzie. No malicious code ‚Äî just clean fun."
})
CreditsTab:CreateButton({ Name = "Check for Updates", Callback = checkForUpdates })
CreditsTab:CreateButton({ Name = "üîÑ Reload Scripts (from GitHub)", Callback = reloadScripts })

-- Welcome
notify("VLK Hub Pro Loaded!", "Welcome back, Velkzie üíô", 4)
